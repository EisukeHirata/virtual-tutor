'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('whatwg-fetch');

require('./ReactGithubStars.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*!
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ReactGithubStars component
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * usage: <ReactGithubStars username="torvalds" defaultColor={true} displayBorder={true} />
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright(c) 2016 MSMFSD
icensed
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var API_ROOT = 'https://api.github.com/users';

/**
 * @class ReactGithubStars
 * @extends {Component}
 */

var ReactGithubStars = function (_Component) {
  _inherits(ReactGithubStars, _Component);

  function ReactGithubStars() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactGithubStars);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactGithubStars.__proto__ || Object.getPrototypeOf(ReactGithubStars)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      stars: null,
      loading: true
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReactGithubStars, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.loadGithubRepoStars(this.props.username);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.setState({ loading: true });
      this.loadGithubRepoStars(newProps.username);
    }

    /**
     * Fetch Github users total repo stars count
     * @param {string} username - valid Github username
     */

  }, {
    key: 'loadGithubRepoStars',
    value: function loadGithubRepoStars(username) {
      var _this2 = this;

      var githubEndpoint = API_ROOT + '/' + username + '/repos?per_page=100';
      fetch(githubEndpoint).then(function (response) {
        response.json().then(function (data) {
          var totalStars = data.reduce(function (prev, curr) {
            return prev + curr.stargazers_count;
          }, 0);
          _this2.setState({
            stars: totalStars,
            loading: false
          });
        });
      }).catch(function (response) {
        if (response || response.status === 404) {
          _this2.setState({
            stars: 0,
            loading: false
          });
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: this.state.loading ? 'rgsContainer' : 'rgsContainer rgsShow' },
        _react2.default.createElement(
          'div',
          { className: this.props.displayBorder ? 'rgs rgsDisplayBorder' : 'rgs' },
          _react2.default.createElement('div', { className: this.props.defaultColor ? 'rgsStar rgsDefaultstar' : 'rgsStar rgsAltstar' }),
          _react2.default.createElement(
            'div',
            { className: this.props.defaultColor ? 'rgsCount' : 'rgsCount rgsAltcolor' },
            this.state.stars
          )
        )
      );
    }
  }]);

  return ReactGithubStars;
}(_react.Component);

ReactGithubStars.propTypes = {
  username: _react.PropTypes.string.isRequired,
  defaultColor: _react.PropTypes.bool.isRequired,
  displayBorder: _react.PropTypes.bool.isRequired
};
exports.default = ReactGithubStars;
module.exports = exports['default'];
